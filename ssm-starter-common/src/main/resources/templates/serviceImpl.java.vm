package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};
import org.springframework.stereotype.Service;
#if(${cfg.addDtoInterfaceAndImpl})
## tableName 是首字母大写的表名
#set($tableName = "${table.name.toUpperCase().substring(0,1)}${table.name.toLowerCase().substring(1)}")
import net.sf.cglib.beans.BeanCopier;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import ${cfg.dtoPackageName}.${tableName}DTO;
#end

/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {

}
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> implements ${table.serviceName} {
#if(${cfg.addDtoInterfaceAndImpl})

    private final BeanCopier dto2DoBeanCopier = BeanCopier.create(${tableName}DTO.class, ${tableName}.class, false);
    private final BeanCopier do2DtoBeanCopier = BeanCopier.create(${tableName}.class, ${tableName}DTO.class, false);

    /**
     * DTO 转 DO
     *
     * @param entity DTO 对象
     * @return
     */
    private ${tableName} dto2Do(${tableName}DTO entity) {
        ${tableName} target = new ${tableName}();
        dto2DoBeanCopier.copy(entity, target, null);
        return target;
    }

    /**
     * DO 转 DTO
     *
     * @param entity DO 对象
     * @return
     */
    private ${tableName}DTO do2Dto(${tableName} entity) {
        ${tableName}DTO target = new ${tableName}DTO();
        do2DtoBeanCopier.copy(entity, target, null);
        return target;
    }

    @Override
    public boolean saveDTO(${tableName}DTO entity) {
        return super.save(dto2Do(entity));
    }

    @Override
    public boolean saveBatchDTO(Collection<${tableName}DTO> entityList) {
        return this.saveBatchDTO(entityList, 30);
    }

    @Override
    public boolean saveBatchDTO(Collection<${tableName}DTO> entityList, int batchSize) {
        List<${tableName}> targetList = new ArrayList<>(entityList.size());
        entityList.forEach(e -> targetList.add(dto2Do(e)));
        return super.saveBatch(targetList, batchSize);
    }

    @Override
    public boolean saveOrUpdateDTO(${tableName}DTO entity) {
        return super.saveOrUpdate(dto2Do(entity));
    }

    @Override
    public boolean saveOrUpdateBatchDTO(Collection<${tableName}DTO> entityList) {
        return this.saveOrUpdateBatchDTO(entityList, 30);
    }

    @Override
    public boolean saveOrUpdateBatchDTO(Collection<${tableName}DTO> entityList, int batchSize) {
        List<${tableName}> targetList = new ArrayList<>(entityList.size());
        entityList.forEach(e -> targetList.add(dto2Do(e)));
        return super.saveOrUpdateBatch(targetList, batchSize);
    }

    @Override
    public boolean updateByIdDTO(${tableName}DTO entity) {
        return super.updateById(dto2Do(entity));
    }

    @Override
    public boolean updateBatchByIdDTO(Collection<${tableName}DTO> entityList) {
        return this.updateBatchByIdDTO(entityList, 30);
    }

    @Override
    public boolean updateBatchByIdDTO(Collection<${tableName}DTO> entityList, int batchSize) {
        List<${tableName}> targetList = new ArrayList<>(entityList.size());
        entityList.forEach(e -> targetList.add(dto2Do(e)));
        return super.updateBatchById(targetList, batchSize);
    }

    @Override
    public ${tableName}DTO getByIdDTO(Serializable id) {
        return do2Dto(super.getById(id));
    }

    @Override
    public Collection<${tableName}DTO> listByIdsDTO(Collection<? extends Serializable> idList) {
        Collection<${tableName}> list = super.listByIds(idList);
        List<${tableName}DTO> result = new ArrayList<>(list.size());
        if (list.size() != 0) {
            list.forEach(e -> result.add(do2Dto(e)));
        }
        return result;
    }

    @Override
    public Collection<${tableName}DTO> listByMapDTO(Map<String, Object> columnMap) {
        Collection<${tableName}> list = super.listByMap(columnMap);
        List<${tableName}DTO> result = new ArrayList<>(list.size());
        if (list.size() != 0) {
            list.forEach(e -> result.add(do2Dto(e)));
        }
        return result;
    }
#end
}
#end
