package ${package.Service};

import ${package.Entity}.${entity};
import ${superServiceClassPackage};
#if(${cfg.addDtoInterfaceAndImpl})
## dtoName 是生成的 dto 的名称
#set($dtoName = "${table.name.toUpperCase().substring(0,1)}${table.name.substring(1)}DTO")
import java.io.Serializable;
import ${cfg.dtoPackageName}.${dtoName};
import java.util.Collection;
import java.util.Map;
#end

/**
 * <p>
 * $!{table.comment} 服务类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${kotlin})
interface ${table.serviceName} : ${superServiceClass}<${entity}>
#else
public interface ${table.serviceName} extends ${superServiceClass}<${entity}> {
#if(${cfg.addDtoInterfaceAndImpl})
    /**
     * <p>
     * 插入一条记录（选择字段，策略插入）
     * </p>
     *
     * @param entity 实体对象
     * @return
     */
    boolean saveDTO(${dtoName} entity);

    /**
     * <p>
     * 插入（批量），该方法不适合 Oracle
     * </p>
     *
     * @param entityList 实体对象集合
     * @return
     */
    boolean saveBatchDTO(Collection<${dtoName}> entityList);

    /**
     * <p>
     * 插入（批量）
     * </p>
     *
     * @param entityList 实体对象集合
     * @param batchSize  插入批次数量
     * @return
     */
    boolean saveBatchDTO(Collection<${dtoName}> entityList, int batchSize);

    /**
     * <p>
     * TableId 注解存在更新记录，否插入一条记录
     * </p>
     *
     * @param entity 实体对象
     * @return
     */
    boolean saveOrUpdateDTO(${dtoName} entity);

    /**
     * <p>
     * 批量修改插入
     * </p>
     *
     * @param entityList 实体对象集合
     * @return
     */
    boolean saveOrUpdateBatchDTO(Collection<${dtoName}> entityList);

    /**
     * <p>
     * 批量修改插入
     * </p>
     *
     * @param entityList 实体对象集合
     * @param batchSize  每次的数量
     * @return
     */
    boolean saveOrUpdateBatchDTO(Collection<${dtoName}> entityList, int batchSize);

    /**
     * <p>
     * 根据 ID 选择修改
     * </p>
     *
     * @param entity 实体对象
     * @return
     */
    boolean updateByIdDTO(${dtoName} entity);

    /**
     * <p>
     * 根据ID 批量更新
     * </p>
     *
     * @param entityList 实体对象集合
     * @return
     */
    boolean updateBatchByIdDTO(Collection<${dtoName}> entityList);

    /**
     * <p>
     * 根据ID 批量更新
     * </p>
     *
     * @param entityList 实体对象集合
     * @param batchSize  更新批次数量
     * @return
     */
    boolean updateBatchByIdDTO(Collection<${dtoName}> entityList, int batchSize);

    /**
     * <p>
     * 根据 ID 查询
     * </p>
     *
     * @param id 主键ID
     * @return
     */
    ${dtoName} getByIdDTO(Serializable id);

    /**
     * <p>
     * 查询（根据ID 批量查询）
     * </p>
     *
     * @param idList 主键ID列表
     * @return
     */
    Collection<${dtoName}> listByIdsDTO(Collection<? extends Serializable> idList);

    /**
     * <p>
     * 查询（根据 columnMap 条件）
     * </p>
     *
     * @param columnMap 表字段 map 对象
     * @return
     */
    Collection<${dtoName}> listByMapDTO(Map<String, Object> columnMap);
#end
}
#end
